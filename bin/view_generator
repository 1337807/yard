#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/../lib/yard'

log.level = Logger::DEBUG
YARD.parse [
  'lib/yard/autoload.rb',
  'lib/yard/code_objects/base.rb',
  'lib/yard/code_objects/namespace_object.rb',
  'lib/yard/handlers/base.rb',
  'lib/yard/generators/base.rb',
  'lib/yard/generators/method_listing_generator.rb',
  'lib/yard/serializers/base.rb',
  'lib/**/*.rb'
]
gclass = eval("YARD::Generators::#{ARGV[0]}")
sclass = ARGV[1] == "nil" ? nil : eval("YARD::Serializers::#{ARGV[1]}") 
obj = ARGV[2] == "all" ? YARD::Registry.all(:module, :class) : P(ARGV[2])
format = ARGV[3].to_sym

if sclass
  sclass = sclass.new 
else
  sclass = YARD::Serializers::StdoutSerializer.new(80)
end
verifier = lambda {|gen, obj| return false if gen.respond_to?(:visibility) && [:protected, :private].include?(gen.visibility) }
gclass.new(:format => format, :template => :default, :serializer => sclass, :verifier => verifier).generate(obj)
