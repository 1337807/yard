#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/../lib/yard'

YARD.logger.level = Logger::DEBUG
YARD.parse [
  'lib/yard/code_objects/base.rb',
  'lib/yard/code_objects/proxy.rb',
  'lib/yard/code_objects/namespace_object.rb',
  'lib/yard/code_objects/class_object.rb',
  'lib/yard/code_objects/module_object.rb',
  'lib/yard/code_objects/class_variable_object.rb',
  'lib/yard/code_objects/constant_object.rb',
  'lib/yard/code_objects/method_object.rb',
  'lib/yard/code_objects/root_object.rb',
  'lib/yard/generators/**/*.rb'
]
gclass = eval("YARD::Generators::#{ARGV[0]}")
sclass = ARGV[1] == "nil" ? nil : eval("YARD::Serializers::#{ARGV[1]}") 
obj = ARGV[2] == "all" ? YARD::Registry.all(:module, :class) : P(ARGV[2])
format = ARGV[3].to_sym

if sclass
  sclass = sclass.new 
else
  sclass = YARD::Serializers::StdoutSerializer.new(80)
end
gclass.new(:format => format, :template => :default, :serializer => sclass).generate(obj)
